.TH ol 1 "Jan 12, 2021"
.SH NAME
ol \- an Owl Lisp compiler and interpreter
.SH SYNOPSIS
.B ol
.RI [ options ] " " [ path ] " ..."
.SH DESCRIPTION
Owl Lisp is a purely functional variant of R7RS Scheme. Ol
can be used to evaluate programs interactively and compile them to native
binaries via C.
.PP
.SH OPTIONS
This program follows the usual GNU command line syntax, with long
options starting with two dashes (`-').
A summary of essential command line flats options is included below.
The complete list is shown on the help page.
.TP
.B \-h, \-\-help
Show summary of options.
.TP
.B \-v, \-\-version
Show version of program.
.TP
.B \-e, \-\-eval string
Evaluate the string, print it's value, and exit with 0 unless errors occurred.
.TP
.B \-t, \-\-test string
Evaluate the string and exit with 1 if the value is #false, 0 if it's true, or 126 if there is an error.
.TP
.B \-o, \-\-output output-file
Compile the given file to fasl or C code, and save the result to the given output file.
.TP
.B \-r, \-\-run path
Load the file silently, and call the last value with the remaining command line arguments.
.TP
.B \-x, \-\-output-format format
Choose what ol should compile the given input to. Valid options are currently \fIc\fR and \fIfasl\fR. This
is normally deduced from the file suffix given in -o, and is thus not usually needed.
.TP
.B -O0, -O1, -O2
Write plain bytecode, compile some common functions to C or everything possible. These only make sense when compiling to C.
.TP
.B \-l, \-\-load path
Resume execution of program state saved with \fIsuspend\fR.
.SH EXAMPLES
.TP
.B Make a simple binary
 $ echo '(lambda (args) (for-each print args))' > test.l
 $ ol -o test.c test.l
 $ gcc -o test test.c
 $ ./test foo bar
.TP
.B Compile in a pipe
$ echo '(lambda (args) (print (cons "I got " args)))' | ol -x c -o - | gcc -x c -o test - && ./test 11 22 33
.TP
.B Loading vs running files
 $ echo '(print "Hello, world!")' > test.l
 $ ol test.l
 Hello, world!
 $ echo '(lambda (args) (print "Hello, world!"))' > test.l
 $ ol --run test.l arg1 arg2 arg3
 Hello, world!
.SH SEE ALSO
.BR ovm (1), gcc (1), scheme48 (1).
.SH AUTHOR
Owl Lisp and this manual page were written by Aki Helin <aki.helin@iki.fi>.
